# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
- task: SonarQubePrepare@5
  inputs:
    SonarQube: 'sonarqubesvcconn'
    scannerMode: 'MSBuild'
    projectKey: 'azure-demo-generator-sandiipc_MyShuttle_AX_4QyXqZxHUG3u6pSo5'

- script: |
    dotnet restore
    dotnet build --configuration Release
- task: SonarQubeAnalyze@5

- task: PowerShell@2
  inputs:
    targetType: 'inline'
    script: |
      # Write your PowerShell commands here.
      
      Write-Host "Sonar Server Name - " + $(SONARSERVERNAME)
      Write-Host "Sonar Token - " + $(SONARTOKEN)
      Write-Host "Sonar Project Key - " + $(SONARPROJECTKEY)
      
      $Token = [System.Text.Encoding]::UTF8.GetBytes($(SONARTOKEN) + ":")
      $TokenInBase64 = [System.Convert]::ToBase64String($Token)
       
      $basicAuth = [string]::Format("Basic {0}", $TokenInBase64)
      $Headers = @{ Authorization = $basicAuth }
       
      $QualityGateResult = Invoke-RestMethod -Method Get -Uri http://$(SONARSERVERNAME)/api/qualitygates/project_status?projectKey=$(SONARPROJECTKEY) -Headers $Headers
      $QualityGateResult | ConvertTo-Json | Write-Host
       
      if ($QualityGateResult.projectStatus.status -eq "OK"){
          Write-Host "Quality Gate Succeeded"
      }
      else{
          throw "Quality gate failed. Please check and fix the issues by reviewing the same."
      }

- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  inputs:
    command: publish
    arguments: '--configuration Release --output publish_output'
    projects: '**/*.csproj'
    publishWebProjects: false
    modifyOutputPath: false
    zipAfterPublish: false

- task: ArchiveFiles@2
  displayName: "Archive files"
  inputs:
    rootFolderOrFile: "$(System.DefaultWorkingDirectory)/publish_output"
    includeRootFolder: false
    archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
    
- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip'
    artifactName: 'drop'